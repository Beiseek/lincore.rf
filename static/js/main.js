// üöÄ –°–û–í–†–ï–ú–ï–ù–ù–´–ô JavaScript –î–õ–Ø –£–õ–¨–¢–†–ê-–°–¢–ò–õ–¨–ù–û–ì–û –°–ê–ô–¢–ê

document.addEventListener('DOMContentLoaded', function () {
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ï–õ–´–ô –¶–í–ï–¢ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    setTimeout(() => {
        const statNumbers = document.querySelectorAll('.hero-stats div:first-child');
        const statLabels = document.querySelectorAll('.hero-stats div:last-child');

        statNumbers.forEach(el => {
            el.style.color = '#ffffff !important';
            el.style.fontWeight = '900 !important';
        });

        statLabels.forEach(el => {
            el.style.color = '#ffffff !important';
            el.style.fontWeight = '500 !important';
        });
    }, 100);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initPreloader();
    initScrollAnimations();
    initHeader();
    initMobileMenu();
    initModals();
    initForms();
    initSmoothScroll();
    initPhoneFormatting();
    initParallax();
    initModernFeatures();
    initAnimatedBorders();
    initModernInteractions();
    initPerformanceOptimizations();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∫–æ—Ä–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    handlePageAnchor();

    // –ü–ª–∞–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    setTimeout(() => {
        document.body.classList.add('loaded');
        initPageLoadAnimations();
    }, 150);

    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    initIntersectionObserver();

    console.log('üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∫–æ—Ä–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function handlePageAnchor() {
    const hash = window.location.hash;
    if (hash) {
        setTimeout(() => {
            const targetElement = document.querySelector(hash);
            if (targetElement) {
                const headerHeight = document.getElementById('header').offsetHeight;
                const targetPosition = targetElement.offsetTop - headerHeight - 20;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }
}

// –ü—Ä–µ–ª–æ–∞–¥–µ—Ä
function initPreloader() {
    const preloader = document.getElementById('preloader');
    if (preloader) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if (document.readyState === 'complete') {
            preloader.style.display = 'none';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        window.addEventListener('load', function () {
            setTimeout(() => {
                preloader.style.opacity = '0';
                setTimeout(() => {
                    preloader.style.display = 'none';
                }, 300);
            }, 500); // –£–º–µ–Ω—å—à–∏–ª–∏ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞
        });
    }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollAnimations() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Intersection Observer
    if ('IntersectionObserver' in window) {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && !entry.target._scrollAnimationStarted) {
                    entry.target._scrollAnimationStarted = true;
                    entry.target.classList.add('animate');

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                    const delay = entry.target.dataset.delay || 0;
                    entry.target.style.animationDelay = delay + 'ms';
                }
            });
        }, observerOptions);

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        document.querySelectorAll('.animate-on-scroll').forEach(el => {
            observer.observe(el);
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —É—Å–ª—É–≥
        document.querySelectorAll('.service-card').forEach((card, index) => {
            card.classList.add('animate-on-scroll');
            card.dataset.delay = index * 200;
            observer.observe(card);
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        document.querySelectorAll('.photo-item').forEach((photo, index) => {
            photo.classList.add('animate-on-scroll');
            photo.dataset.delay = index * 150;
            observer.observe(photo);
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —É—Å–ª—É–≥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
        document.querySelectorAll('.service-card-modern').forEach((card, index) => {
            if (!card.classList.contains('animate-on-scroll')) {
                card.classList.add('animate-on-scroll');
                card.dataset.delay = index * 100;
                observer.observe(card);
            }
        });
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–ø–∫–æ–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initHeader() {
    const header = document.getElementById('header');
    let lastScrollY = window.scrollY;
    let headerHidden = false;

    window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        if (currentScrollY > 50) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }

        // –°–∫—Ä—ã–≤–∞–µ–º —à–∞–ø–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑
        if (currentScrollY > lastScrollY && currentScrollY > 10) {
            header.style.transform = 'translateY(-100%)';
            headerHidden = true;
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–≤–µ—Ä—Ö
        else if (currentScrollY < lastScrollY && currentScrollY > 10) {
            header.style.transform = 'translateY(0)';
            headerHidden = false;
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        else if (currentScrollY <= 10) {
            header.style.transform = 'translateY(0)';
            headerHidden = false;
        }

        lastScrollY = currentScrollY;
    });
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
function initMobileMenu() {
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileMenu = document.getElementById('mobileMenu');

    if (!mobileMenuToggle || !mobileMenu) return;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    mobileMenuToggle.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        if (mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        } else {
            openMobileMenu();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ–Ω
    mobileMenu.addEventListener('click', function (e) {
        if (e.target === mobileMenu) {
            closeMobileMenu();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    const mobileNavItems = mobileMenu.querySelectorAll('.mobile-nav-item');
    mobileNavItems.forEach(item => {
        item.addEventListener('click', function () {
            closeMobileMenu();
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        }
    });

    function openMobileMenu() {
        mobileMenu.classList.add('active');
        document.body.style.overflow = 'hidden';

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
        mobileMenuToggle.classList.add('active');
    }

    function closeMobileMenu() {
        mobileMenu.classList.remove('active');
        document.body.style.overflow = '';

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        mobileMenuToggle.classList.remove('active');
    }
}


// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function initModals() {
    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä
    const tenderBtn = document.getElementById('tenderBtn');
    const tenderModal = document.getElementById('tenderModal');
    const tenderModalClose = document.getElementById('tenderModalClose');

    if (tenderBtn && tenderModal) {
        tenderBtn.addEventListener('click', () => openModal(tenderModal));
    }
    if (tenderModalClose) {
        tenderModalClose.addEventListener('click', () => closeModal(tenderModal));
    }

    // –ó–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É
    const serviceModal = document.getElementById('serviceModal');
    const serviceModalClose = document.getElementById('serviceModalClose');

    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('btn-service-application') ||
            e.target.classList.contains('btn-call-specialist')) {
            const serviceType = e.target.dataset.service;
            if (serviceType) {
                document.getElementById('serviceType').value = serviceType;
                openModal(serviceModal);
            }
        }
    });

    if (serviceModalClose) {
        serviceModalClose.addEventListener('click', () => closeModal(serviceModal));
    }

    // –ó–≤–æ–Ω–æ–∫
    const callModal = document.getElementById('callModal');
    const callModalClose = document.getElementById('callModalClose');

    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('btn-call') || e.target.classList.contains('btn-call-specialist')) {
            openModal(callModal);
        }
    });

    if (callModalClose) {
        callModalClose.addEventListener('click', () => closeModal(callModal));
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function (e) {
            if (e.target === this) {
                closeModal(this);
            }
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ Escape
    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') {
            document.querySelectorAll('.modal.show').forEach(modal => {
                closeModal(modal);
            });
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª–∞–º–∏
function openModal(modal) {
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';

    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const firstInput = modal.querySelector('input:not([type="hidden"])');
    if (firstInput) {
        setTimeout(() => firstInput.focus(), 300);
    }
}

function closeModal(modal) {
    modal.classList.remove('show');
    document.body.style.overflow = '';

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
    const form = modal.querySelector('form');
    if (form) {
        form.reset();
        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–æ–∫
        const submitBtn = form.querySelector('.btn-submit');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = submitBtn.dataset.originalText || submitBtn.textContent;
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
function initForms() {
    // –§–æ—Ä–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä
    const tenderForm = document.getElementById('tenderForm');
    if (tenderForm) {
        tenderForm.addEventListener('submit', handleTenderSubmit);
    }

    // –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É
    const serviceForm = document.getElementById('serviceForm');
    if (serviceForm) {
        serviceForm.addEventListener('submit', handleServiceSubmit);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach(input => {
        input.addEventListener('change', function () {
            const label = this.parentElement.querySelector('.file-upload-label span');
            if (label && this.files.length > 0) {
                label.textContent = this.files[0].name;
            }
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä
async function handleTenderSubmit(e) {
    e.preventDefault();

    const form = e.target;
    const submitBtn = form.querySelector('.btn-submit');
    const originalText = submitBtn.textContent;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.dataset.originalText = originalText;

    try {
        const formData = new FormData(form);

        const response = await fetch('/ajax/tender-invitation/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCSRFToken()
            }
        });

        const data = await response.json();

        if (data.success) {
            showNotification(data.message, 'success');
            closeModal(document.getElementById('tenderModal'));
        } else {
            showNotification(data.message, 'error');
        }
    } catch (error) {
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        console.error('Error:', error);
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É
async function handleServiceSubmit(e) {
    e.preventDefault();

    const form = e.target;
    const submitBtn = form.querySelector('.btn-submit');
    const originalText = submitBtn.textContent;

    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.dataset.originalText = originalText;

    try {
        const formData = new FormData(form);
        const data = {
            full_name: formData.get('full_name'),
            phone: formData.get('phone'),
            service_type: formData.get('service_type')
        };

        const response = await fetch('/ajax/service-application/', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            }
        });

        const result = await response.json();

        if (result.success) {
            showNotification(result.message, 'success');
            closeModal(document.getElementById('serviceModal'));
        } else {
            showNotification(result.message, 'error');
        }
    } catch (error) {
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        console.error('Error:', error);
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
function getCSRFToken() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'csrftoken') {
            return value;
        }
    }

    // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –º–µ—Ç–∞-—Ç–µ–≥–µ
    const metaTag = document.querySelector('meta[name="csrf-token"]');
    return metaTag ? metaTag.getAttribute('content') : '';
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const container = document.getElementById('notifications');
    if (!container) return;

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;

    const icon = type === 'success' ? '‚úì' : type === 'error' ? '‚úï' : '‚Ñπ';

    notification.innerHTML = `
        <div class="icon">${icon}</div>
        <div class="message">${message}</div>
        <button class="close" onclick="this.parentElement.remove()">√ó</button>
    `;

    container.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'fadeInRight 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
function initSmoothScroll() {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —è–∫–æ—Ä—è–º–∏
    document.querySelectorAll('a[href*="#"]').forEach(link => {
        link.addEventListener('click', function (e) {
            const href = this.getAttribute('href');
            console.log('Clicked link with href:', href);

            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —è–∫–æ—Ä–µ–º
            if (href.includes('#contacts')) {
                console.log('Redirecting to contacts section');
                // –ù–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                return;
            }

            // –ï—Å–ª–∏ —ç—Ç–æ —è–∫–æ—Ä—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (href.startsWith('#')) {
                e.preventDefault();
                const targetId = href.substring(1);
                const targetElement = document.getElementById(targetId);
                console.log('Looking for element with ID:', targetId, 'Found:', targetElement);

                if (targetElement) {
                    const headerHeight = document.getElementById('header').offsetHeight;
                    const targetPosition = targetElement.offsetTop - headerHeight - 20;

                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            }
        });
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
function initPhoneFormatting() {
    const phoneInputs = document.querySelectorAll('input[type="tel"]:not(#quotePhone)');

    phoneInputs.forEach(input => {
        input.addEventListener('input', function (e) {
            let value = e.target.value.replace(/\D/g, '');

            if (value.startsWith('8')) {
                value = '7' + value.substring(1);
            }

            if (value.startsWith('7') && value.length <= 11) {
                let formatted = '+7';
                if (value.length > 1) {
                    formatted += ' (' + value.substring(1, 4);
                }
                if (value.length > 4) {
                    formatted += ') ' + value.substring(4, 7);
                }
                if (value.length > 7) {
                    formatted += '-' + value.substring(7, 9);
                }
                if (value.length > 9) {
                    formatted += '-' + value.substring(9, 11);
                }

                e.target.value = formatted;
            }
        });

        input.addEventListener('keydown', function (e) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º: backspace, delete, tab, escape, enter
            if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
                // –†–∞–∑—Ä–µ—à–∞–µ–º: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                (e.keyCode === 65 && e.ctrlKey) ||
                (e.keyCode === 67 && e.ctrlKey) ||
                (e.keyCode === 86 && e.ctrlKey) ||
                (e.keyCode === 88 && e.ctrlKey) ||
                // –†–∞–∑—Ä–µ—à–∞–µ–º: —Å—Ç—Ä–µ–ª–∫–∏
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                return;
            }

            // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    });
}

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç—ã
function initParallax() {
    const parallaxElements = document.querySelectorAll('[data-parallax]');

    if (parallaxElements.length === 0) return;

    function updateParallax() {
        const scrollTop = window.pageYOffset;

        parallaxElements.forEach(element => {
            const speed = element.dataset.parallax || 0.5;
            const yPos = -(scrollTop * speed);
            element.style.transform = `translateY(${yPos}px)`;
        });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    let ticking = false;

    window.addEventListener('scroll', () => {
        if (!ticking) {
            requestAnimationFrame(() => {
                updateParallax();
                ticking = false;
            });
            ticking = true;
        }
    });
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

// –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
function debounce(func, wait, immediate) {
    let timeout;
    return function executedFunction() {
        const context = this;
        const args = arguments;

        const later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };

        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª (—Å—á–µ—Ç—á–∏–∫–∏)
function animateNumber(element, start, end, duration) {
    const startTime = performance.now();
    const range = end - start;

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ï–õ–´–ô –¶–í–ï–¢
    element.style.color = '#ffffff !important';
    element.style.fontWeight = '900 !important';

    function updateNumber(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        const current = Math.floor(start + (range * progress));
        element.textContent = current.toLocaleString();

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ï–õ–´–ô –¶–í–ï–¢ –ù–ê –ö–ê–ñ–î–û–ú –ö–ê–î–†–ï
        element.style.color = '#ffffff !important';
        element.style.fontWeight = '900 !important';

        if (progress < 1) {
            requestAnimationFrame(updateNumber);
        }
    }

    requestAnimationFrame(updateNumber);
}

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');

    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    observer.unobserve(img);
                }
            });
        });

        images.forEach(img => imageObserver.observe(img));
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        images.forEach(img => {
            img.src = img.dataset.src;
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', initLazyLoading);

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
function initModernFeatures() {

    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫" –≤ hero
    const heroCallBtn = document.getElementById('heroCallBtn');
    console.log('Hero call button:', heroCallBtn);
    if (heroCallBtn) {
        heroCallBtn.addEventListener('click', function () {
            console.log('Hero call button clicked!');
            const callModal = document.getElementById('callModal');
            console.log('Call modal:', callModal);
            openModal(callModal);
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫" –ø–æ–¥ –∫–∞—Ä—Ç–æ–π
    const mapCallBtn = document.querySelector('.btn-call-modern[data-service="call"]');
    console.log('Map call button:', mapCallBtn);
    if (mapCallBtn) {
        mapCallBtn.addEventListener('click', function () {
            console.log('Map call button clicked!');
            const callModal = document.getElementById('callModal');
            console.log('Call modal:', callModal);
            openModal(callModal);
        });
    }

    // –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∫–∞
    const callForm = document.getElementById('callForm');
    if (callForm) {
        callForm.addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const data = {
                full_name: formData.get('full_name'),
                phone: formData.get('phone'),
                service_type: '–ó–∞–∫–∞–∑ –∑–≤–æ–Ω–∫–∞'
            };

            fetch('/ajax/service-application/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
                        closeModal(document.getElementById('callModal'));
                        callForm.reset();
                    } else {
                        showNotification(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', 'error');
                });
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–µ –∑–≤–æ–Ω–∫–∞
    const callModalCancel = document.getElementById('callModalCancel');
    if (callModalCancel) {
        callModalCancel.addEventListener('click', function () {
            closeModal(document.getElementById('callModal'));
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ hero
    animateCounters();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
    initDropdownMenu();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥
    initServiceButtons();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥
function initServiceButtons() {
    const serviceButtons = document.querySelectorAll('.service-button[data-service]');
    serviceButtons.forEach(button => {
        button.addEventListener('click', function () {
            const service = this.dataset.service;
            const action = this.dataset.action;

            if (action.includes('–∑–≤–æ–Ω–æ–∫')) {
                openModal(document.getElementById('callModal'));
            } else {
                showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫".', 'info');
            }
        });
    });

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"
    document.addEventListener('click', function (e) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å data-service="call"
        if (e.target.closest('[data-service="call"]')) {
            e.preventDefault();
            const callModal = document.getElementById('callModal');
            if (callModal) {
                openModal(callModal);
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —É—Å–ª—É–≥–∞–º
function scrollToServices() {
    console.log('scrollToServices called!');
    const servicesSection = document.getElementById('services');
    console.log('Services section:', servicesSection);
    if (servicesSection) {
        const headerHeight = document.getElementById('header').offsetHeight;
        const targetPosition = servicesSection.offsetTop - headerHeight - 20;
        console.log('Scrolling to position:', targetPosition);

        window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
        });
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function animateCounters() {
    const counters = document.querySelectorAll('.stat-number[data-count]');

    const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const counter = entry.target;
                const target = parseInt(counter.dataset.count);
                animateNumber(counter, 0, target, 2000);
                observer.unobserve(counter);
            }
        });
    }, observerOptions);

    counters.forEach(counter => {
        observer.observe(counter);
    });
}

// –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initDropdownMenu() {
    const dropdown = document.querySelector('.nav-dropdown');
    if (dropdown) {
        const btn = dropdown.querySelector('.nav-dropdown-btn');
        const menu = dropdown.querySelector('.nav-dropdown-menu');

        let timeout;

        dropdown.addEventListener('mouseenter', function () {
            clearTimeout(timeout);
            menu.style.opacity = '1';
            menu.style.visibility = 'visible';
            menu.style.transform = 'translateX(-50%) translateY(0)';
        });

        dropdown.addEventListener('mouseleave', function () {
            timeout = setTimeout(() => {
                menu.style.opacity = '0';
                menu.style.visibility = 'hidden';
                menu.style.transform = 'translateX(-50%) translateY(-10px)';
            }, 150);
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', function (e) {
    console.error('JavaScript Error:', e.error);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
function checkBrowserSupport() {
    const features = {
        flexbox: CSS.supports('display', 'flex'),
        grid: CSS.supports('display', 'grid'),
        intersectionObserver: 'IntersectionObserver' in window,
        fetch: 'fetch' in window
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ CSS
    Object.keys(features).forEach(feature => {
        if (features[feature]) {
            document.documentElement.classList.add('supports-' + feature);
        } else {
            document.documentElement.classList.add('no-' + feature);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
checkBrowserSupport();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞ –ø–æ–¥ —à–∞–ø–∫—É
function adjustBodyPadding() {
    const header = document.getElementById('header');
    if (header) {
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setTimeout(() => {
            const headerHeight = header.offsetHeight;
            const padding = headerHeight + 10; // –î–æ–±–∞–≤–ª—è–µ–º 10px –∑–∞–ø–∞—Å
            document.body.style.paddingTop = padding + 'px';
            console.log('Header height:', headerHeight, 'Body padding-top:', padding);
        }, 100);
    }
}

// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', debounce(adjustBodyPadding, 250));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ —Å Intersection Observer
function initAnimatedBorders() {
    const serviceCards = document.querySelectorAll('.service-card-modern');
    const featureCards = document.querySelectorAll('.feature-card-animated');


    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const colors = ['#3d5ba5', '#6366f1', '#8b5cf6', '#1e1a6b'];

    function animateBorder(element) {
        let colorIndex = 0;
        let direction = 1;

        const animationInterval = setInterval(() => {
            const currentColor = colors[colorIndex];
            element.style.borderColor = currentColor;
            element.style.boxShadow = `0 0 25px ${currentColor}40`;

            colorIndex += direction;
            if (colorIndex >= colors.length - 1) {
                direction = -1;
            } else if (colorIndex <= 0) {
                direction = 1;
            }
        }, 1000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        element._animationInterval = animationInterval;

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (!entry.isIntersecting && element._animationInterval) {
                    clearInterval(element._animationInterval);
                    element._animationInterval = null;
                }
            });
        });

        observer.observe(element);
    }

    // Intersection Observer –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
    const serviceObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target._animationStarted) {
                entry.target._animationStarted = true;
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
                setTimeout(() => {
                    animateBorder(entry.target);
                }, 200);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '50px'
    });

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —É—Å–ª—É–≥
    serviceCards.forEach(card => {
        serviceObserver.observe(card);
    });

    // Intersection Observer –¥–ª—è –±–ª–æ–∫–æ–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    const featureObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target._animationStarted) {
                entry.target._animationStarted = true;
                setTimeout(() => {
                    animateBorder(entry.target);
                }, 300);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '50px'
    });

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –±–ª–æ–∫–∞–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    featureCards.forEach(card => {
        featureObserver.observe(card);
    });

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ê–ù–ò–ú–ê–¶–ò–ò –ù–ê –í–°–ï–• –ö–ê–†–¢–û–ß–ö–ê–• –ß–ï–†–ï–ó 2 –°–ï–ö–£–ù–î–´
    setTimeout(() => {
        serviceCards.forEach((card, index) => {
            if (!card._animationStarted) {
                card._animationStarted = true;
                setTimeout(() => {
                    animateBorder(card);
                }, index * 200);
            }
        });
    }, 2000);

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –ü–†–û–ö–†–£–¢–ö–ï
    let scrollTimeout;
    window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            serviceCards.forEach((card, index) => {
                if (!card._animationStarted && isElementInViewport(card)) {
                    card._animationStarted = true;
                    setTimeout(() => {
                        animateBorder(card);
                    }, index * 100);
                }
            });
        }, 100);
    });
}

// üé® –°–û–í–†–ï–ú–ï–ù–ù–´–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –≠–§–§–ï–ö–¢–´
function initModernInteractions() {
    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å –º—ã—à–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ - –û–¢–ö–õ–Æ–ß–ï–ù–û
    // initMouseParallax();

    // –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    initMagneticButtons();

    // –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initStaggeredAnimations();

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    initInteractiveParticles();
}

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å –º—ã—à–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ - –û–¢–ö–õ–Æ–ß–ï–ù–û
function initMouseParallax() {
    // –£–ë–†–ê–ù–û: –µ–±–∞–Ω—É—Ç—ã–π –ø–∞—Ä–∞–ª–ª–∞–∫—Å –∫–æ—Ç–æ—Ä—ã–π –¥–≤–∏–≥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º
}

// –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
function initMagneticButtons() {
    const magneticElements = document.querySelectorAll('.btn-cta-primary, .btn-cta-secondary, .btn-tender');

    magneticElements.forEach(el => {
        el.addEventListener('mousemove', (e) => {
            const rect = el.getBoundingClientRect();
            const x = e.clientX - rect.left - rect.width / 2;
            const y = e.clientY - rect.top - rect.height / 2;

            el.style.transform = `translate(${x * 0.1}px, ${y * 0.1}px)`;
        });

        el.addEventListener('mouseleave', () => {
            el.style.transform = 'translate(0, 0)';
        });
    });
}

// –ü–æ—ç—Ç–∞–ø–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å Intersection Observer
function initStaggeredAnimations() {
    const elements = document.querySelectorAll('.service-card-modern');

    // Intersection Observer –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    const staggerObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target._staggerAnimationStarted) {
                entry.target._staggerAnimationStarted = true;
                entry.target.classList.add('animate');

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                const index = Array.from(elements).indexOf(entry.target);
                entry.target.style.animationDelay = `${index * 0.1}s`;
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '50px'
    });

    elements.forEach(el => {
        el.classList.add('animate-on-scroll');
        staggerObserver.observe(el);
    });
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
function initInteractiveParticles() {
    const hero = document.querySelector('.hero-simple');
    if (!hero) return;

    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —á–∞—Å—Ç–∏—Ü
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = '1';

    hero.appendChild(canvas);

    function resizeCanvas() {
        canvas.width = hero.offsetWidth;
        canvas.height = hero.offsetHeight;
    }

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    const particles = [];

    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
    for (let i = 0; i < 50; i++) {
        particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: Math.random() * 2 + 1,
            speedX: (Math.random() - 0.5) * 0.5,
            speedY: (Math.random() - 0.5) * 0.5,
            opacity: Math.random() * 0.5 + 0.2
        });
    }

    function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach(particle => {
            particle.x += particle.speedX;
            particle.y += particle.speedY;

            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;
            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;

            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255, 255, 255, ${particle.opacity})`;
            ctx.fill();
        });

        requestAnimationFrame(animateParticles);
    }

    animateParticles();
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initPageLoadAnimations() {
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    animateCounters();

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    animatedElements.forEach((el, index) => {
        setTimeout(() => {
            el.classList.add('animate');
        }, index * 100);
    });
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function initPerformanceOptimizations() {
    // Throttle –¥–ª—è —Ä–µ—Å–∞–π–∑–∞
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            adjustBodyPadding();
        }, 250);
    });

    // Preload –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const criticalImages = document.querySelectorAll('.logo-img, .hero-simple img');
    criticalImages.forEach(img => {
        if (img.dataset.src) {
            img.src = img.dataset.src;
        }
    });
}

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Intersection Observer
function initIntersectionObserver() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target._intersectionAnimationStarted) {
                entry.target._intersectionAnimationStarted = true;
                entry.target.classList.add('animate');

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (entry.target.classList.contains('service-card-modern')) {
                    // –£–ë–†–ê–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ transform —á—Ç–æ–±—ã CSS hover —Ä–∞–±–æ—Ç–∞–ª
                    entry.target.style.transform = '';
                }

                if (entry.target.classList.contains('stat-number')) {
                    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ï–õ–´–ô –¶–í–ï–¢ –ò –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ò–ú–ê–¶–ò–Æ
                    entry.target.style.color = '#ffffff !important';
                    entry.target.style.fontWeight = '900 !important';

                    const target = parseInt(entry.target.dataset.count);
                    animateNumber(entry.target, 0, target, 2000);
                }
            }
        });
    }, observerOptions);

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∏—Ä—É–µ–º—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    document.querySelectorAll('.animate-on-scroll, .service-card-modern, .stat-number').forEach(el => {
        observer.observe(el);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        const serviceCards = document.querySelectorAll('.service-card-modern');
        serviceCards.forEach(card => {
            if (!card._intersectionAnimationStarted && isElementInViewport(card)) {
                card._intersectionAnimationStarted = true;
                card.classList.add('animate');
            }
        });
    }, 1000);
}
